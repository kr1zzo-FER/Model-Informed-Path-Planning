
## Step 1: Download data from OpenStreetMap (optional)

# Process OSM data
location_folder : "voz2"
location_image: "voz2.png"


## Step 2 : Data extraction and processing from OpenStreetMap 
## Step 4: Cost map generation

resized_location_image : "voz_resized2.png"
result_costmap_name : "voz_costmap.png"

custom_start_goal : False

# Step 2 : False, Step 4 : True
cost_map : False

# This is hardcoded start and goal position and applied only if custom_start_goal is False
start_latitude : 45.234781
start_longitude: 14.577538

goal_latitude : 45.230241
goal_longitude: 14.583173


## Step 3: Path planning algorithms testing

result_image : "voz2_result.png"
table_name : "runtime_results2.png"

grid_size : 10.0  # [m]
robot_radius : 5.0  # [m]


# thread_enable : True - thread for plotting map
# thread_enable map : False - for algorithm runtime calculation
thread_enable : False

#test and plot options
# 1. a_star
# 2. bidirectional_a_star
# 3. dijkstra
# 4. d_star
# 5. d_star_lite
# 6. breadth_first_search
# 7. bidirectional_breadth_first_search
# 8. depth_first_search
# 9. greedy_best_first_search

test_algorithm : 
- "a_star"
- "bidirectional_a_star"
- "dijkstra"
- "d_star"
- "d_star_lite"
- "breadth_first_search"
- "bidirectional_breadth_first_search"
- "greedy_best_first_search"


plot_algorithms:
- "a_star"
- "bidirectional_a_star"
- "dijkstra"
- "d_star"
- "d_star_lite"
- "breadth_first_search"
- "bidirectional_breadth_first_search"
- "greedy_best_first_search"



## Step 5: Path planning algorithms testing with cost map
red_cost : 10
yellow_cost : 5
green_cost : 2

## Step 6: Path optimization

# optimization
optimization : True

# speed limits [knots]
max_boat_speed : 12
red_speed : 2
yellow_speed : 5
green_speed : 8



